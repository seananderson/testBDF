// Generated by rstantools.  Do not edit by hand.

/*
    testBDF is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    testBDF is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with testBDF.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_testBDF_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_testBDF");
    reader.add_event(35, 33, "end", "model_testBDF");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
sho(const T0__& t,
        const std::vector<T1__>& y,
        const std::vector<T2__>& theta,
        const std::vector<T3__>& x_r,
        const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        validate_non_negative_index("dydt", "2", 2);
        std::vector<local_scalar_t__  > dydt(2, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dydt, DUMMY_VAR__);
        stan::math::fill(dydt, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    get_base1(y, 2, "y", 1), 
                    "assigning variable dydt");
        current_statement_begin__ = 9;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (-(get_base1(y, 1, "y", 1)) - (get_base1(theta, 1, "theta", 1) * get_base1(y, 2, "y", 1))), 
                    "assigning variable dydt");
        current_statement_begin__ = 10;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dydt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sho_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
        const std::vector<T1__>& y,
        const std::vector<T2__>& theta,
        const std::vector<T3__>& x_r,
        const std::vector<int>& x_i, std::ostream* pstream__) const {
        return sho(t, y, theta, x_r, x_i, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_testBDF
  : public stan::model::model_base_crtp<model_testBDF> {
private:
        int T;
        std::vector<double> y0;
        double t0;
        std::vector<double> ts;
        std::vector<double> theta;
        std::vector<double> x_r;
        std::vector<int> x_i;
public:
    model_testBDF(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_testBDF(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_testBDF_namespace::model_testBDF";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("y0", "2", 2);
            context__.validate_dims("data initialization", "y0", "double", context__.to_vec(2));
            y0 = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("y0");
            pos__ = 0;
            size_t y0_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                y0[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("ts", "T", T);
            context__.validate_dims("data initialization", "ts", "double", context__.to_vec(T));
            ts = std::vector<double>(T, double(0));
            vals_r__ = context__.vals_r("ts");
            pos__ = 0;
            size_t ts_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < ts_k_0_max__; ++k_0__) {
                ts[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("theta", "1", 1);
            context__.validate_dims("data initialization", "theta", "double", context__.to_vec(1));
            theta = std::vector<double>(1, double(0));
            vals_r__ = context__.vals_r("theta");
            pos__ = 0;
            size_t theta_k_0_max__ = 1;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                theta[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 21;
            validate_non_negative_index("x_r", "0", 0);
            x_r = std::vector<double>(0, double(0));
            stan::math::fill(x_r, DUMMY_VAR__);
            current_statement_begin__ = 22;
            validate_non_negative_index("x_i", "0", 0);
            x_i = std::vector<int>(0, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_testBDF() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y_hat");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_testBDF_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 27;
            validate_non_negative_index("y_hat", "T", T);
            validate_non_negative_index("y_hat", "2", 2);
            std::vector<std::vector<double> > y_hat(T, std::vector<double>(2, double(0)));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            stan::math::assign(y_hat,integrate_ode_bdf(sho_functor__(), y0, t0, ts, theta, x_r, x_i, pstream__));
            // generated quantities statements
            current_statement_begin__ = 29;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 30;
                stan::model::assign(y_hat, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(y_hat, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "y_hat") + normal_rng(0, 0.1, base_rng__)), 
                            "assigning variable y_hat");
                current_statement_begin__ = 31;
                stan::model::assign(y_hat, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (stan::model::rvalue(y_hat, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "y_hat") + normal_rng(0, 0.1, base_rng__)), 
                            "assigning variable y_hat");
            }
            // validate, write generated quantities
            current_statement_begin__ = 27;
            size_t y_hat_k_0_max__ = T;
            size_t y_hat_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    vars__.push_back(y_hat[k_0__][k_1__]);
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_testBDF";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_hat_k_0_max__ = T;
        size_t y_hat_k_1_max__ = 2;
        for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_hat_k_0_max__ = T;
        size_t y_hat_k_1_max__ = 2;
        for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_testBDF_namespace::model_testBDF stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
